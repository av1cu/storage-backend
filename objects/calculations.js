const express = require("express");
const bodyParser = require("body-parser");
const cors = require('cors');
const pool = require("../config/db"); // <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const authenticate = require('../auth/authorization'); 
const telegram = require('../sender/totelegram')

const app = express();
app.use(bodyParser.json());
app.use(cors()); // –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
const createTable = async () => {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS wagons (
        id SERIAL PRIMARY KEY,
        wagon_number VARCHAR(50),
        wagon_type VARCHAR(50),
        customer VARCHAR(255),
        start_repair DATE,
        end_repair DATE,
        repair_type VARCHAR(50),
        work_group TEXT, -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        work_name VARCHAR(255),
        work_cost DECIMAL,
        material_cost DECIMAL,
        energy_cost DECIMAL,
        fuel_cost DECIMAL,
        social_contributions DECIMAL,
        total DECIMAL, -- –ù–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
        total_with_vat DECIMAL -- –ù–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
      );
    `);
    console.log("–¢–∞–±–ª–∏—Ü–∞ wagons —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:", error);
  }
};

// –í—ã–∑–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
createTable();

// POST: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
app.post("/", authenticate, async (req, res) => {
  console.log("received post method body:", req.body);
  try {
    const {
      "–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞": wagonNumber,
      "–¢–∏–ø –≤–∞–≥–æ–Ω–∞": wagonType,
      "–ó–∞–∫–∞–∑—á–∏–∫": customer,
      "–ù–∞—á–∞–ª–æ —Ä–µ–º–æ–Ω—Ç–∞": startRepair,
      "–ö–æ–Ω–µ—Ü —Ä–µ–º–æ–Ω—Ç–∞": endRepair,
      "–¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞": repairType,
      "–ì—Ä—É–ø–ø–∞ —Ä–∞–±–æ—Ç": workGroup,
      "workName": workName,
      "workCost": workCost,
      "–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã": materialName,
      "materialCost": materialCost,
      "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è (—Ç–µ–Ω–≥–µ)": energyCost,
      "–¢–æ–ø–ª–∏–≤–æ (—Ç–µ–Ω–≥–µ)": fuelCost,
      "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è (—Ç–µ–Ω–≥–µ)": socialContributions,
      "total": total,
      "totalWithVAT": totalWithVAT
    } = req.body;

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Å–æ–ª—å (–∏–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram)
    const message = `üì• –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –≤–∞–≥–æ–Ω–∞ ${wagonNumber}.\n
    –¢–∏–ø –≤–∞–≥–æ–Ω–∞: ${wagonType}, –ó–∞–∫–∞–∑—á–∏–∫: ${customer}, –¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞: ${repairType}, 
    –ù–∞—á–∞–ª–æ —Ä–µ–º–æ–Ω—Ç–∞: ${startRepair}, –ö–æ–Ω–µ—Ü —Ä–µ–º–æ–Ω—Ç–∞: ${endRepair}, –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total}, 
    –°—Ç–æ–∏–º–æ—Å—Ç—å —Å –ù–î–°: ${totalWithVAT}`;
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    telegram(message);

    // –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const result = await pool.query(
      `INSERT INTO wagons (
        wagon_number, wagon_type, customer, start_repair, end_repair, repair_type, 
        work_group, work_name, work_cost, material_cost, energy_cost, fuel_cost, 
        social_contributions, total, total_with_vat
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) RETURNING *`,
      [
        wagonNumber,
        wagonType,
        customer,
        startRepair,
        endRepair,
        repairType,
        JSON.stringify(workGroup),
        workName,
        workCost,
        materialCost,
        energyCost,
        fuelCost,
        socialContributions,
        total,
        totalWithVAT
      ]
    );

    res.status(201).json(result.rows[0]);
  } catch (error) {
    console.error(error);
    res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏");
  }
});



// READ: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
app.get("/",authenticate, async (req, res) => {
  try {
    const result = await pool.query("SELECT * FROM wagons");
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤
    result.rows.forEach(row => {
      row.work_group = JSON.parse(row.work_group);
    });
    res.status(200).json(result.rows);
  } catch (error) {
    console.error(error);
    res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
  }
});

// READ: –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –ø–æ ID
app.get("/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const result = await pool.query("SELECT * FROM wagons WHERE id = $1", [id]);
    if (result.rows.length === 0) {
      return res.status(404).send("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤
    result.rows.forEach(row => {
      row.work_group = JSON.parse(row.work_group);
    });
    res.status(200).json(result.rows[0]);
  } catch (error) {
    console.error(error);
    res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
  }
});

// PUT: –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
app.put("/:id", authenticate, async (req, res) => {
  try {
    const { id } = req.params;
    const {
      "–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞": wagonNumber,
      "–¢–∏–ø –≤–∞–≥–æ–Ω–∞": wagonType,
      "–ó–∞–∫–∞–∑—á–∏–∫": customer,
      "–ù–∞—á–∞–ª–æ —Ä–µ–º–æ–Ω—Ç–∞": startRepair,
      "–ö–æ–Ω–µ—Ü —Ä–µ–º–æ–Ω—Ç–∞": endRepair,
      "–¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞": repairType,
      "–ì—Ä—É–ø–ø–∞ —Ä–∞–±–æ—Ç": workGroup,
      "workName": workName,
      "workCost": workCost,
      "–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã": materialName,
      "materialCost": materialCost,
      "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è (—Ç–µ–Ω–≥–µ)": energyCost,
      "–¢–æ–ø–ª–∏–≤–æ (—Ç–µ–Ω–≥–µ)": fuelCost,
      "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è (—Ç–µ–Ω–≥–µ)": socialContributions,
      "total": total,
      "totalWithVAT": totalWithVAT
    } = req.body;

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram)
    const message = `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤–∞–≥–æ–Ω–∞ ${wagonNumber}.
    –ò–∑–º–µ–Ω–µ–Ω–∏—è: 
    –¢–∏–ø –≤–∞–≥–æ–Ω–∞: ${wagonType}, –ó–∞–∫–∞–∑—á–∏–∫: ${customer}, –¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞: ${repairType}, 
    –ù–∞—á–∞–ª–æ —Ä–µ–º–æ–Ω—Ç–∞: ${startRepair}, –ö–æ–Ω–µ—Ü —Ä–µ–º–æ–Ω—Ç–∞: ${endRepair}, –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total}, 
    –°—Ç–æ–∏–º–æ—Å—Ç—å —Å –ù–î–°: ${totalWithVAT}`;
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    telegram(message);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const result = await pool.query(
      `UPDATE wagons SET
        wagon_number = $1, wagon_type = $2, customer = $3, start_repair = $4, 
        end_repair = $5, repair_type = $6, work_group = $7, work_name = $8, 
        work_cost = $9, material_cost = $10, energy_cost = $11, fuel_cost = $12, 
        social_contributions = $13, total = $14, total_with_vat = $15
      WHERE id = $16 RETURNING *`,
      [
        wagonNumber,
        wagonType,
        customer,
        startRepair,
        endRepair,
        repairType,
        JSON.stringify(workGroup),
        workName,
        workCost,
        materialCost,
        energyCost,
        fuelCost,
        socialContributions,
        total,
        totalWithVAT,
        id
      ]
    );

    if (result.rows.length === 0) {
      return res.status(404).send("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }
    res.status(200).json(result.rows[0]);
  } catch (error) {
    console.error(error);
    res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏");
  }
});


// DELETE: –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
app.delete("/:id", authenticate, async (req, res) => {
  try {
    const { id } = req.params;
    const result = await pool.query("DELETE FROM wagons WHERE id = $1 RETURNING *", [id]);

    if (result.rows.length === 0) {
      return res.status(404).send("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }

    const deletedRecord = result.rows[0];

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    const message = `üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –≤–∞–≥–æ–Ω–∞ ${deletedRecord.wagon_number}.
    –ó–∞–∫–∞–∑—á–∏–∫: ${deletedRecord.customer}, –¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞: ${deletedRecord.repair_type}`;
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    telegram(message);

    res.status(200).json(deletedRecord);
  } catch (error) {
    console.error(error);
    res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏");
  }
});


module.exports = app;
