const express = require("express");
const multer = require("multer");
const path = require("path");
const fs = require("fs");
const pool = require("../config/db"); // <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const authenticate = require('../auth/authorization'); 

const router = express.Router();

const createTable = async () => {
    try {
        await pool.query(`
            CREATE TABLE IF NOT EXISTS files (
                id SERIAL PRIMARY KEY,
                filename VARCHAR(255) NOT NULL,
                wagon_id VARCHAR(255) NOT NULL,
                upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (wagon_id) REFERENCES trains(wagonNumber) ON DELETE CASCADE
            );
        `);
        console.log("–¢–∞–±–ª–∏—Ü–∞ files —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:", error);
    }
};

createTable();
// –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É uploads, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const uploadDir = path.join(__dirname, "../uploads");
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir, { recursive: true });
}

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Multer
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
        const newFilename = uniqueSuffix + "-" + file.originalname;
        file.newFilename = newFilename; // <-- —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∏–º—è –≤ –æ–±—ä–µ–∫—Ç–µ file
        cb(null, newFilename);
    },
});

const upload = multer({ storage });

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
router.post("/upload", authenticate, upload.single("file"), async (req, res) => {
    if (!req.file || !req.body.wagonNumber) {
        return res.status(400).json({ error: "–§–∞–π–ª –∏ –Ω–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const { newFilename } = req.file;
    const { wagonNumber } = req.body;

    try {
        // –ü–æ–ª—É—á–∞–µ–º wagon_id –ø–æ wagonNumber
        const wagonResult = await pool.query("SELECT id FROM trains WHERE wagonNumber = $1", [wagonNumber]);
        if (wagonResult.rows.length === 0) {
            return res.status(404).json({ error: "–í–∞–≥–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        const result = await pool.query(
            "INSERT INTO files (filename, wagon_id) VALUES ($1, $2) RETURNING *",
            [newFilename, wagonNumber]
        );

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        const message = `üì§ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –≤–∞–≥–æ–Ω–∞ ${wagonNumber}.
üìù –ù–æ–≤—ã–π —Ñ–∞–π–ª: ${newFilename}`;

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        telegram(message);

        return res.status(201).json({ message: "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω", file: result.rows[0] });
    } catch (err) {
        console.error(err);
        return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ –ë–î" });
    }
});



// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
router.get("/:wagonNumber",authenticate, async (req, res) => {
    const { wagonNumber } = req.params;

    try {
        // –ü–æ–ª—É—á–∞–µ–º wagon_id –ø–æ –Ω–æ–º–µ—Ä—É –≤–∞–≥–æ–Ω–∞
        const wagonResult = await pool.query("SELECT id FROM trains WHERE wagonNumber = $1", [wagonNumber]);
        if (wagonResult.rows.length === 0) {
            return res.status(404).json({ error: "–í–∞–≥–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }


        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        const fileResult = await pool.query(
            "SELECT filename FROM files WHERE wagon_id = $1 ORDER BY upload_date DESC LIMIT 1",
            [wagonNumber]
        );

        if (fileResult.rows.length === 0) {
            return res.status(404).json({ error: "–§–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–∞–≥–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
        }

        const filename = fileResult.rows[0].filename;
        const filePath = path.join(uploadDir, filename);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if (!fs.existsSync(filePath)) {
            return res.status(404).json({ error: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" });
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        res.download(filePath, filename, (err) => {
            if (err) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:", err);
                res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞" });
            }
        });

    } catch (err) {
        console.error(err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞" });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞–≥–æ–Ω–∞
router.get("/:wagonNumber/exist",authenticate, async (req, res) => {
    const { wagonNumber } = req.params;

    try {
        const fileResult = await pool.query(
            "SELECT filename FROM files WHERE wagon_id = $1 ORDER BY upload_date DESC LIMIT 1",
            [wagonNumber]
        );

        if (fileResult.rows.length === 0) {
            return res.status(404).json({ exists: false, message: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.status(200).json({ exists:   true, message: "–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞" });
    }
});


// –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–∏–∑ –ë–î –∏ —Å –¥–∏—Å–∫–∞)
// –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
router.delete("/:id", authenticate, async (req, res) => {
    const { id } = req.params;
    try {
        const fileResult = await pool.query("SELECT filename, wagon_id FROM files WHERE id = $1", [id]);

        if (fileResult.rows.length === 0) {
            return res.status(404).json({ error: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö" });
        }

        const { filename, wagon_id } = fileResult.rows[0];
        const filePath = path.join(uploadDir, filename);

        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
        await pool.query("DELETE FROM files WHERE id = $1", [id]);

        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
        if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath);
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        const message = `üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª—ë–Ω –¥–ª—è –≤–∞–≥–æ–Ω–∞ ${wagon_id}.
üìù –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: ${filename}`;

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        telegram(message);

        res.json({ message: "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω" });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞" });
    }
});


module.exports = router;
